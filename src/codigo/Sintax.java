
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 26 12:48:48 MST 2020
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 26 12:48:48 MST 2020
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\004\000\002\002\013\000\002\002\011" +
    "\000\002\002\010\000\002\002\023\000\002\002\022\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\003\003\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\006\000\002" +
    "\004\006\000\002\004\005\000\002\004\007\000\002\004" +
    "\007\000\002\004\006\000\002\004\006\000\002\004\010" +
    "\000\002\004\010\000\002\004\011\000\002\004\011\000" +
    "\002\004\006\000\002\006\011\000\002\013\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\006\000\002\013\007\000\002\007\015\000\002\010\011" +
    "\000\002\011\013\000\002\012\011\000\002\014\012\000" +
    "\002\014\011\000\002\005\005\000\002\005\004\000\002" +
    "\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\012\004\005\005\004\013\010\042\006\001" +
    "\002\000\004\044\254\001\002\000\010\005\222\006\224" +
    "\043\223\001\002\000\004\034\215\001\002\000\004\002" +
    "\214\001\002\000\004\042\011\001\002\000\004\034\012" +
    "\001\002\000\004\035\013\001\002\000\004\036\014\001" +
    "\002\000\022\012\024\013\027\014\022\015\017\020\016" +
    "\021\031\033\023\044\032\001\002\000\022\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\017\ufff1\020\ufff1\021\ufff1\037\ufff1" +
    "\001\002\000\004\034\206\001\002\000\004\034\174\001" +
    "\002\000\022\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee" +
    "\020\uffee\021\uffee\037\uffee\001\002\000\022\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\037\ufff7" +
    "\001\002\000\006\040\152\044\153\001\002\000\026\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\035\uffdc\037\uffdc\043\uffdc\001\002\000\006\032\135\044" +
    "\136\001\002\000\022\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\037\ufff3\001\002\000\022\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\037\ufff5\001\002\000\006\032\120\044\121\001\002\000" +
    "\022\012\024\013\027\014\022\015\017\017\102\020\016" +
    "\021\031\037\117\001\002\000\004\034\044\001\002\000" +
    "\004\030\034\001\002\000\022\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\017\uffed\020\uffed\021\uffed\037\uffed\001\002\000" +
    "\012\011\036\033\037\044\040\045\035\001\002\000\026" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda\020\uffda\021" +
    "\uffda\035\uffda\037\uffda\043\uffda\001\002\000\006\011\041" +
    "\044\042\001\002\000\026\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\017\uffdb\020\uffdb\021\uffdb\035\uffdb\037\uffdb\043\uffdb" +
    "\001\002\000\026\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\035\uffd9\037\uffd9\043\uffd9\001\002" +
    "\000\026\012\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\035\uffd8\037\uffd8\043\uffd8\001\002\000\004" +
    "\011\043\001\002\000\026\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\017\uffd7\020\uffd7\021\uffd7\035\uffd7\037\uffd7\043\uffd7" +
    "\001\002\000\006\012\046\044\047\001\002\000\004\035" +
    "\073\001\002\000\004\044\064\001\002\000\004\022\050" +
    "\001\002\000\004\045\051\001\002\000\004\043\052\001" +
    "\002\000\006\033\023\044\032\001\002\000\004\043\054" +
    "\001\002\000\006\032\056\044\057\001\002\000\004\035" +
    "\uffd1\001\002\000\004\044\063\001\002\000\006\031\060" +
    "\032\061\001\002\000\004\045\062\001\002\000\004\035" +
    "\uffcf\001\002\000\004\035\uffd0\001\002\000\004\035\uffce" +
    "\001\002\000\004\022\065\001\002\000\004\045\066\001" +
    "\002\000\004\043\067\001\002\000\006\033\023\044\032" +
    "\001\002\000\004\043\071\001\002\000\006\032\056\044" +
    "\057\001\002\000\004\035\uffd2\001\002\000\004\036\074" +
    "\001\002\000\022\012\024\013\027\014\022\015\017\020" +
    "\016\021\031\033\023\044\032\001\002\000\022\012\024" +
    "\013\027\014\022\015\017\017\102\020\016\021\031\037" +
    "\104\001\002\000\022\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\017\ufff2\020\ufff2\021\ufff2\037\ufff2\001\002\000\022\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\021\uffef" +
    "\037\uffef\001\002\000\022\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\017\ufff8\020\ufff8\021\ufff8\037\ufff8\001\002\000\022" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\037\ufff4\001\002\000\004\036\107\001\002\000\022" +
    "\012\ufff6\013\ufff6\014\ufff6\015\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\037\ufff6\001\002\000\022\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\017\uffd3\020\uffd3\021\uffd3\037\uffd3\001\002\000" +
    "\004\017\102\001\002\000\022\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\017\ufff0\020\ufff0\021\ufff0\037\ufff0\001\002\000" +
    "\022\012\024\013\027\014\022\015\017\020\016\021\031" +
    "\033\023\044\032\001\002\000\022\012\024\013\027\014" +
    "\022\015\017\017\102\020\016\021\031\037\111\001\002" +
    "\000\004\020\112\001\002\000\004\034\113\001\002\000" +
    "\006\033\023\044\032\001\002\000\004\035\115\001\002" +
    "\000\004\043\116\001\002\000\022\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\017\uffd4\020\uffd4\021\uffd4\037\uffd4\001\002" +
    "\000\004\002\000\001\002\000\004\044\133\001\002\000" +
    "\012\022\125\031\122\032\124\043\123\001\002\000\004" +
    "\045\131\001\002\000\024\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\017\uffec\020\uffec\021\uffec\035\uffec\037\uffec\001\002" +
    "\000\004\043\130\001\002\000\004\045\126\001\002\000" +
    "\004\043\127\001\002\000\024\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\017\uffea\020\uffea\021\uffea\035\uffea\037\uffea\001" +
    "\002\000\024\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\035\uffe9\037\uffe9\001\002\000\004\043" +
    "\132\001\002\000\024\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\035\uffeb\037\uffeb\001\002\000" +
    "\004\043\134\001\002\000\024\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\017\uffe8\020\uffe8\021\uffe8\035\uffe8\037\uffe8\001" +
    "\002\000\004\044\150\001\002\000\012\022\142\031\137" +
    "\032\141\043\140\001\002\000\004\045\146\001\002\000" +
    "\024\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\035\uffe7\037\uffe7\001\002\000\004\043\145\001" +
    "\002\000\004\045\143\001\002\000\004\043\144\001\002" +
    "\000\024\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\035\uffe5\037\uffe5\001\002\000\024\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\035" +
    "\uffe4\037\uffe4\001\002\000\004\043\147\001\002\000\024" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\035\uffe6\037\uffe6\001\002\000\004\043\151\001\002" +
    "\000\024\012\uffe3\013\uffe3\014\uffe3\015\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\035\uffe3\037\uffe3\001\002\000\004\041\172" +
    "\001\002\000\006\022\155\031\154\001\002\000\004\011" +
    "\164\001\002\000\004\011\156\001\002\000\006\011\157" +
    "\044\160\001\002\000\004\043\163\001\002\000\004\011" +
    "\161\001\002\000\004\043\162\001\002\000\024\012\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\020\uffdf\021\uffdf\035" +
    "\uffdf\037\uffdf\001\002\000\024\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\017\uffe1\020\uffe1\021\uffe1\035\uffe1\037\uffe1\001" +
    "\002\000\006\011\165\044\166\001\002\000\004\043\171" +
    "\001\002\000\004\011\167\001\002\000\004\043\170\001" +
    "\002\000\024\012\uffe0\013\uffe0\014\uffe0\015\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\035\uffe0\037\uffe0\001\002\000\024\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\035\uffe2\037\uffe2\001\002\000\004\044\173\001\002\000" +
    "\024\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde\020\uffde" +
    "\021\uffde\035\uffde\037\uffde\001\002\000\006\033\023\044" +
    "\032\001\002\000\004\035\176\001\002\000\004\036\177" +
    "\001\002\000\022\012\024\013\027\014\022\015\017\020" +
    "\016\021\031\033\023\044\032\001\002\000\022\012\024" +
    "\013\027\014\022\015\017\017\102\020\016\021\031\037" +
    "\201\001\002\000\024\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\202\017\uffdd\020\uffdd\021\uffdd\037\uffdd\001\002\000" +
    "\004\036\203\001\002\000\022\012\024\013\027\014\022" +
    "\015\017\020\016\021\031\033\023\044\032\001\002\000" +
    "\022\012\024\013\027\014\022\015\017\017\102\020\016" +
    "\021\031\037\205\001\002\000\022\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\017\uffd6\020\uffd6\021\uffd6\037\uffd6\001\002" +
    "\000\006\033\023\044\032\001\002\000\004\035\210\001" +
    "\002\000\004\036\211\001\002\000\022\012\024\013\027" +
    "\014\022\015\017\020\016\021\031\033\023\044\032\001" +
    "\002\000\022\012\024\013\027\014\022\015\017\017\102" +
    "\020\016\021\031\037\213\001\002\000\022\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\021\uffd5\037\uffd5" +
    "\001\002\000\004\002\001\001\002\000\004\035\216\001" +
    "\002\000\004\036\217\001\002\000\022\012\024\013\027" +
    "\014\022\015\017\020\016\021\031\033\023\044\032\001" +
    "\002\000\022\012\024\013\027\014\022\015\017\017\102" +
    "\020\016\021\031\037\221\001\002\000\004\002\uffff\001" +
    "\002\000\004\044\234\001\002\000\004\002\ufffe\001\002" +
    "\000\004\007\225\001\002\000\004\042\226\001\002\000" +
    "\004\034\227\001\002\000\004\035\230\001\002\000\004" +
    "\036\231\001\002\000\022\012\024\013\027\014\022\015" +
    "\017\020\016\021\031\033\023\044\032\001\002\000\022" +
    "\012\024\013\027\014\022\015\017\017\102\020\016\021" +
    "\031\037\233\001\002\000\004\002\ufffd\001\002\000\004" +
    "\034\235\001\002\000\004\035\236\001\002\000\004\036" +
    "\237\001\002\000\006\004\241\037\240\001\002\000\004" +
    "\002\ufffc\001\002\000\004\006\242\001\002\000\004\007" +
    "\243\001\002\000\004\042\244\001\002\000\004\034\245" +
    "\001\002\000\010\012\024\013\027\014\022\001\002\000" +
    "\004\035\247\001\002\000\004\036\250\001\002\000\022" +
    "\012\024\013\027\014\022\015\017\020\016\021\031\033" +
    "\023\044\032\001\002\000\022\012\024\013\027\014\022" +
    "\015\017\017\102\020\016\021\031\037\252\001\002\000" +
    "\004\037\253\001\002\000\004\002\ufffa\001\002\000\004" +
    "\034\255\001\002\000\004\035\256\001\002\000\004\036" +
    "\257\001\002\000\006\004\261\037\260\001\002\000\004" +
    "\002\ufffb\001\002\000\004\006\262\001\002\000\004\007" +
    "\263\001\002\000\004\042\264\001\002\000\004\034\265" +
    "\001\002\000\010\012\024\013\027\014\022\001\002\000" +
    "\004\035\267\001\002\000\004\036\270\001\002\000\022" +
    "\012\024\013\027\014\022\015\017\020\016\021\031\033" +
    "\023\044\032\001\002\000\022\012\024\013\027\014\022" +
    "\015\017\017\102\020\016\021\031\037\272\001\002\000" +
    "\004\037\273\001\002\000\004\002\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\004\002\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\027\004\020\006\025\007\024\010\014" +
    "\012\017\013\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\004\077\006\102\007\100\010\075\011\104\012\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\052\001\001\000" +
    "\002\001\001\000\004\005\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\067\001\001\000\002\001\001\000\004\005\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\074\004" +
    "\020\006\025\007\024\010\014\012\017\013\032\001\001" +
    "\000\016\004\077\006\102\007\100\010\075\011\104\012" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\105\001\001\000\002" +
    "\001\001\000\020\003\107\004\020\006\025\007\024\010" +
    "\014\012\017\013\032\001\001\000\016\004\077\006\102" +
    "\007\100\010\075\011\104\012\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\177" +
    "\004\020\006\025\007\024\010\014\012\017\013\032\001" +
    "\001\000\016\004\077\006\102\007\100\010\075\011\104" +
    "\012\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\203\004\020\006\025\007\024\010\014\012\017" +
    "\013\032\001\001\000\016\004\077\006\102\007\100\010" +
    "\075\011\104\012\076\001\001\000\002\001\001\000\004" +
    "\013\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\211\004\020\006\025\007\024\010\014\012\017" +
    "\013\032\001\001\000\016\004\077\006\102\007\100\010" +
    "\075\011\104\012\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\217\004\020\006\025\007\024\010\014\012\017\013\032" +
    "\001\001\000\016\004\077\006\102\007\100\010\075\011" +
    "\104\012\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\003\231\004\020\006\025\007\024\010\014\012\017\013" +
    "\032\001\001\000\016\004\077\006\102\007\100\010\075" +
    "\011\104\012\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\250\004" +
    "\020\006\025\007\024\010\014\012\017\013\032\001\001" +
    "\000\016\004\077\006\102\007\100\010\075\011\104\012" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\270" +
    "\004\020\006\025\007\024\010\014\012\017\013\032\001" +
    "\001\000\016\004\077\006\102\007\100\010\075\011\104" +
    "\012\076\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Cadena Corchete_a Corchete_c Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= Class Identificador Parentesis_a Parentesis_c Llave_a Modificador Static Void Main Parentesis_a DECLARACION Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Modificador Class Identificador Parentesis_a Parentesis_c Llave_a Modificador Static Void Main Parentesis_a DECLARACION Parentesis_c Llave_a SENTENCIA Llave_c Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Class Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Modificador Class Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Modificador Static Void Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Modificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

